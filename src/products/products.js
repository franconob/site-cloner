// Generated by CoffeeScript 1.6.3
var BaseProduct, Elgg, Joomla, Limesurvey, Moodle, Prestashop, Vtiger, Wordpress, utils, _ref, _ref1, _ref2, _ref3, _ref4,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseProduct = require('./BaseProduct');

utils = require('../utils');

Wordpress = (function(_super) {
  __extends(Wordpress, _super);

  function Wordpress() {
    _ref = Wordpress.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  return Wordpress;

})(BaseProduct);

Joomla = (function(_super) {
  __extends(Joomla, _super);

  function Joomla(config, vars, subdomain, destDir) {
    this.config = config;
    this.vars = vars;
    this.subdomain = subdomain;
    Joomla.__super__.constructor.call(this, this.config, this.vars, this.subdomain, this.destDir);
    this.configFileVars['logDir'] = this._getPath(this.destDir, 'logs');
    this.configFileVars['tmpDir'] = this._getPath(this.destDir, 'tmp');
  }

  return Joomla;

})(BaseProduct);

Limesurvey = (function(_super) {
  __extends(Limesurvey, _super);

  function Limesurvey() {
    _ref1 = Limesurvey.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  return Limesurvey;

})(BaseProduct);

Moodle = (function(_super) {
  __extends(Moodle, _super);

  function Moodle() {
    _ref2 = Moodle.__super__.constructor.apply(this, arguments);
    return _ref2;
  }

  return Moodle;

})(BaseProduct);

Prestashop = (function(_super) {
  __extends(Prestashop, _super);

  function Prestashop() {
    _ref3 = Prestashop.__super__.constructor.apply(this, arguments);
    return _ref3;
  }

  return Prestashop;

})(BaseProduct);

Vtiger = (function(_super) {
  __extends(Vtiger, _super);

  function Vtiger() {
    _ref4 = Vtiger.__super__.constructor.apply(this, arguments);
    return _ref4;
  }

  return Vtiger;

})(BaseProduct);

Elgg = (function(_super) {
  __extends(Elgg, _super);

  function Elgg(config, vars, subdomain, destdir) {
    var _this = this;
    this.config = config;
    this.vars = vars;
    this.subdomain = subdomain;
    Elgg.__super__.constructor.call(this, this.config, this.vars, this.subdomain, destdir);
    this.on('compile.success', function() {
      return _this.updateDb();
    });
  }

  Elgg.prototype.updateDb = function() {
    var conn,
      _this = this;
    conn = this._connect({
      database: "lp_" + this.subdomain
    });
    return conn.execute('UPDATE `elgg_datalists` SET `value` = ? WHERE `name` = "path"', ["" + this.destDir + "/"], function(err, res) {
      if (err) {
        utils.HandleError.call(_this, err, 'updatedb_err');
      }
      return conn.execute('UPDATE `elgg_datalists` SET `value` = ? WHERE `name` = "dataroot"', ["" + _this.baseDir + "/elgg_data/"], function(err, res) {
        if (err) {
          utils.HandleError.call(_this, err, 'updatedb_err');
        }
        return conn.execute('UPDATE `elgg_sites_entity` SET `url` = ?', [_this.domain], function(err, res) {
          if (err) {
            utils.HandleError.call(_this, err, 'updatedb_err');
          }
          return conn.execute("UPDATE elgg_metastrings set string = ? WHERE id = (SELECT value_id from elgg_metadata where name_id = 						(SELECT * FROM (SELECT id FROM elgg_metastrings WHERE string = 'filestore::dir_root') as ms2) LIMIT 1)", ["" + _this.baseDir + "/elgg_data/"], function(err, res) {
            if (err) {
              utils.HandleError.call(_this, err, 'updatedb_err');
            }
            return conn.end(function(err) {
              if (err) {
                utils.HandleError.call(_this, err, 'updatedb_err');
              }
              return _this.emit('success', _this.subdomain);
            });
          });
        });
      });
    });
  };

  return Elgg;

})(BaseProduct);

module.exports.Wordpress = Wordpress;

module.exports.Joomla = Joomla;

module.exports.Limesurvey = Limesurvey;

module.exports.Moodle = Moodle;

module.exports.Prestashop = Prestashop;

module.exports.Vtiger = Vtiger;

module.exports.Elgg = Elgg;
