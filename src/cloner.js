// Generated by CoffeeScript 1.6.3
(function() {
  var Cloner, ClonerFactory, EventEmitter, fs, mkdirp, mysql, rimraf, utils,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs-extra');

  mkdirp = require('mkdirp');

  ClonerFactory = require('./products/ClonerFactory');

  EventEmitter = (require('events')).EventEmitter;

  utils = require('./utils');

  rimraf = require('rimraf');

  mysql = require('mysql2');

  Cloner = (function(_super) {
    __extends(Cloner, _super);

    function Cloner(vars, config, lp, subdomain) {
      this.vars = vars;
      this.config = config;
      this.lp = lp;
      this.subdomain = subdomain;
      this.dest = "" + this.config.env.destDir + "/" + this.subdomain;
      this.srcDir = "" + this.config.env.srcDir + "/" + this.lp;
      EventEmitter.call(this);
    }

    Cloner.prototype.clone = function(force) {
      var _this = this;
      return fs.exists(this.dest, function(exists) {
        if (exists) {
          if (!force) {
            utils.HandleError.call(_this, new Error('El dominio ya existe'), 'domain_exists', _this.subdomain);
          } else {
            return rimraf(_this.dest, function(err) {
              if (err) {
                utils.HandleError.call(_this, err, 'rmmdir');
                return;
              }
              return _this.dropDb(function(err) {
                return _this.createDir();
              });
            });
          }
        } else {
          return _this.createDir();
        }
      });
    };

    Cloner.prototype.createDir = function() {
      var Product,
        _this = this;
      Product = ClonerFactory.getCloner(this.lp, this.config, this.vars, this.subdomain, this.dest);
      return mkdirp(this.dest, function(err) {
        if (err) {
          utils.HandleError.call(_this, err, 'mkdir', _this.dest);
          return;
        }
        return fs.copy(_this.srcDir, _this.dest, function(err) {
          if (err) {
            utils.HandleError.call(_this, err, 'copy', _this.srcDir, _this.dest);
            return;
          }
          Product.compile();
          Product.on('success', function(domain) {
            return _this._fixPerms(Product, function() {
              return _this.emit('success', domain);
            });
          });
          return Product.on('error', function(err, type, args) {
            return _this.emit('error', err, type, args);
          });
        });
      });
    };

    Cloner.prototype.dropDb = function(callback) {
      var conn;
      conn = mysql.createConnection({
        user: this.config.env.db.user,
        password: this.config.env.db.password
      });
      return conn.execute("DROP DATABASE lp_" + this.subdomain, function(err, res) {
        return conn.end(function() {
          return callback(err);
        });
      });
    };

    Cloner.prototype._fixPerms = function(product, cb) {
      var _this = this;
      return utils.GetUid("", 'u', function(err, uid, stderr) {
        return utils.GetUid(_this.config.env.unix.httpGroup, 'g', function(err, gid, stderr) {
          return fs.chown(product.baseDir, parseInt(uid), parseInt(gid), function(err) {
            if (err) {
              utils.HandleError.call(_this, err, 'chown_err');
            }
            return cb();
          });
        });
      });
    };

    return Cloner;

  })(EventEmitter);

  module.exports = Cloner;

}).call(this);
