// Generated by CoffeeScript 1.6.3
(function() {
  var Cloner, exec, fs, hogan, mkdirp, mysql;

  fs = require('fs-extra');

  mkdirp = require('mkdirp');

  hogan = require('hogan.js');

  mysql = require('mysql2');

  exec = (require('child_process')).exec;

  Cloner = (function() {
    function Cloner(vars, config, lp, domain) {
      this.vars = vars;
      this.config = config;
      this.lp = lp;
      this.domain = domain;
      this.baseSQL = "db.sql";
      this.dbCompiled = null;
    }

    Cloner.prototype.clone = function(callback) {
      var _this = this;
      this.callback = callback;
      this.dest = "" + this.config.destDir + "/" + this.domain + "/htdocs";
      return mkdirp(this.dest, function(err) {
        if (err) {
          throw err;
        }
        return fs.copy(_this.config.srcDir, _this.dest, function(err) {
          if (err) {
            throw err;
          }
          return _this._compileDb(function() {
            return _this._createDb(function() {
              return _this._compileConfig(function() {
                return _this.callback();
              });
            });
          });
        });
      });
    };

    Cloner.prototype._connect = function(options) {
      var config;
      if (options == null) {
        options = {};
      }
      config = {
        user: this.config.db.user,
        password: this.config.db.password,
        multipleStatements: true
      };
      return this.conn = mysql.createConnection(config);
    };

    Cloner.prototype._createDb = function(callback) {
      var dbName,
        _this = this;
      dbName = "lp_" + this.domain;
      this._connect();
      return this.conn.query("CREATE DATABASE " + dbName + " CHARACTER SET utf8 COLLATE utf8_general_ci", function(err, result) {
        if (err) {
          throw err;
        }
        return _this._mysqlCmd(dbName, "" + _this.dest + "/" + _this.baseSQL, function(err, stdout, stderr) {
          if (err) {
            throw err;
          }
          return _this.conn.end(function(err) {
            return callback();
          });
        });
      });
    };

    Cloner.prototype._compileDb = function(callback) {
      var _this = this;
      return fs.readFile("" + this.dest + "/" + this.baseSQL, {
        encoding: 'utf8'
      }, function(err, data) {
        var template;
        template = hogan.compile(data);
        _this.dbCompiled = template.render(_this.vars);
        return fs.writeFile("" + _this.dest + "/" + _this.baseSQL, _this.dbCompiled, function(err) {
          if (err) {
            throw err;
          }
          return callback();
        });
      });
    };

    Cloner.prototype._compileConfig = function(callback) {
      var config,
        _this = this;
      config = "" + this.dest + "/" + this.config.all.configFile;
      return fs.readFile("" + this.config.srcDir + "/" + this.config.all.configFile, {
        encoding: 'utf8'
      }, function(err, data) {
        var template, vars;
        if (err) {
          throw err;
        }
        template = hogan.compile(data);
        vars = {
          dbUser: _this.config.db.user,
          dbName: "lp_" + _this.domain,
          dbPassword: _this.config.db.password
        };
        return fs.writeFile(config, template.render(vars), function(err) {
          if (err) {
            throw err;
          }
          return callback();
        });
      });
    };

    Cloner.prototype._mysqlCmd = function(db, file, callback) {
      return exec("mysql -u" + this.config.db.user + " -p" + this.config.db.password + " " + db + " < " + file, callback);
    };

    return Cloner;

  })();

  module.exports = Cloner;

}).call(this);
