// Generated by CoffeeScript 1.6.3
var Cloner, ClonerFactory, EventEmitter, fs, mkdirp, utils,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

fs = require('fs-extra');

mkdirp = require('mkdirp');

ClonerFactory = require('./products/ClonerFactory');

EventEmitter = (require('events')).EventEmitter;

utils = require('./utils');

Cloner = (function(_super) {
  __extends(Cloner, _super);

  Cloner.instance = null;

  Cloner.create = function(vars, config, lp, subdomain) {
    if (Cloner.instance === null) {
      return Cloner.instance = new Cloner(vars, config, lp, subdomain);
    } else {
      return Cloner.instance;
    }
  };

  function Cloner(vars, config, lp, subdomain) {
    this.vars = vars;
    this.config = config;
    this.lp = lp;
    this.subdomain = subdomain;
    this.dest = "" + this.config.env.destDir + "/" + this.subdomain;
    this.config.env.srcDir = "" + this.config.env.srcDir + "/" + this.lp;
    EventEmitter.call(this);
  }

  Cloner.prototype.clone = function() {
    var Product,
      _this = this;
    Product = ClonerFactory.getCloner(this.lp, this.config, this.vars, this.subdomain, this.dest);
    return mkdirp(this.dest, function(err) {
      if (err) {
        utils.HandleError.call(_this, err, 'mkdir', _this.dest);
        return;
      }
      return fs.copy(_this.config.env.srcDir, _this.dest, function(err) {
        if (err) {
          utils.HandleError.call(_this, err, 'copy', _this.config.env.srcDir, _this.dest);
          return;
        }
        Product.compile();
        Product.on('success', function(domain) {
          return _this._fixPerms(Product, function() {
            return _this.emit('success', domain);
          });
        });
        return Product.on('error', function(err, type, args) {
          return _this.emit('error', err, type, args);
        });
      });
    });
  };

  Cloner.prototype._fixPerms = function(product, cb) {
    var _this = this;
    return utils.GetUid("", 'u', function(err, uid, stderr) {
      return utils.GetUid(_this.config.env.unix.httpGroup, 'g', function(err, gid, stderr) {
        return fs.chown(product.baseDir, parseInt(uid), parseInt(gid), function(err) {
          if (err) {
            utils.HandleError.call(_this, err, 'chown_err');
          }
          return cb();
        });
      });
    });
  };

  return Cloner;

})(EventEmitter);

module.exports = Cloner;
